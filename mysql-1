CREATE database ORG;
USE ORG;

CREATE TABLE Worker (
W_ID int not null primary key auto_increment,
FIRST_NAME CHAR (20),
LAST_NAME CHAR(25),
SALARY INT(15),
JOINING_DATE datetime,
DEPARTMENT CHAR(25) 
);

INSERT INTO Worker 
(W_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES
(001, 'Monika', 'Arora', 100000, '14-02-20 09.00.00', 'HR'),
(002, 'Niharika', 'Verma', 80000, '14-06-11 09.00.00', 'Admin'),
(003, 'Vishal', 'Singhal', 300000, '14-02-20 09.00.00', 'HR'),
(004, 'Amitabh', 'Singh', 500000, '14-02-20 09.00.00', 'Admin'),
(005, 'Vivek', 'Bhati', 500000, '14-06-11 09.00.00', 'Admin'),
(006, 'Vipul', 'Diwan', 200000, '14-06-11 09.00.00', 'Account'),
(007, 'Satish', 'Kumar', 75000, '14-01-20 09.00.00', 'Account'),
(008, 'Geetika', 'Chauhan', 90000, '14-04-11 09.00.00', 'Admin');

CREATE TABLE Bonus (
WORKER_REF_ID INT,
BONUS_AMOUNT INT(10),
BONUS_DATE DATETIME,
FOREIGN KEY (WORKER_REF_ID)
REFERENCES Worker(W_ID)
ON DELETE CASCADE
);

INSERT INTO Bonus
(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
(001, 5000, '16-02-20'),
(002, 3000, '16-06-11'),
(003, 4000, '16-02-20'),
(001, 4500, '16-02-20'),
(002, 3500, '16-06-11');

CREATE TABLE Title (
WORKER_REF_ID INT,
WORKER_TITLE CHAR(25),
AFFECTED_FROM DATETIME,
FOREIGN KEY (WORKER_REF_ID)
REFERENCES Worker(W_ID)
ON DELETE CASCADE
);

INSERT INTO Title
(WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM) VALUES
(001, 'Manager', '2016-02-20 00:00:00'),
(002, 'Executive', '2016-06-11 00:00:00'),
(008, 'Executive', '2016-06-11 00:00:00'),
(005, 'Manager', '2016-06-11 00:00:00'),
(004, 'Asst. Manager', '2016-06-11 00:00:00'),
(007, 'Executive', '2016-06-11 00:00:00'),
(006, 'Lead', '2016-06-11 00:00:00'),
(003, 'Lead', '2016-06-11 00:00:00');

-- queries on single table
select * from worker;
select first_name, salary from worker where salary >= 90000;
select * from worker where salary between 90000 and 300000;
select * from worker where department IN('hr','admiN') ;
select * from worker where department NOT IN('hr','admiN');

-- wildcard/ pattern
select first_name from worker where first_name LIKE '%v%';
select * from worker having first_name like '_i%';

-- sorting using order by ; defoult is 'asc'
select * from worker order by salary; 
select * from worker order by salary asc;
select * from worker order by salary DESC;

-- distinct keyword
select distinct department from worker;

-- data grouping - aggregation(mean finding count)
-- 'Group BY' ; used with aggregation fun. ex: count, sum, avg, min, max

select department from worker group by department;
select department, count(*) from worker group by department;
select department, count(department) from worker group by department;
select department, sum(salary) from worker group by department;
select department, avg(salary) from worker group by department;
select * from worker group by department;

-- filter in 'group by' and having
select department, count(department) from worker group by department having count(department) > 2;
-- having vs where
-- where is use to apply filter on table, we can't use it after group by clouse
-- having is use to filter in grouped table, it can be also used for table

